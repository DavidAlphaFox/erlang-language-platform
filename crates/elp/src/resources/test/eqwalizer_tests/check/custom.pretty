error: incompatible_types
   ┌─ check/src/custom.erl:25:5
   │
25 │     element(4, Tup).
   │     ^^^^^^^^^^^^^^^ erlang:element(4, Tup).
Expression has type:   #D{dynamic() => dynamic()}
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: index_out_of_bounds
   ┌─ check/src/custom.erl:29:5
   │
29 │     element(42, Tup).
   │     ^^^^^^^^^^^^^^^^ 42.
Tried to access element 42 of a tuple with 3 elements

See https://fb.me/eqwalizer_errors#index_out_of_bounds

error: incompatible_types
   ┌─ check/src/custom.erl:39:5
   │
39 │     element(2, Tup).
   │     ^^^^^^^^^^^^^^^ erlang:element(2, Tup).
Expression has type:   number() | string() | atom()
Context expected type: #D{dynamic() => dynamic()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
   ┌─ check/src/custom.erl:43:16
   │
43 │     element(2, Tup).
   │                ^^^
   │                │
   │                Tup.
Expression has type:   {atom(), string()} | [dynamic()]
Context expected type: tuple()

See https://fb.me/eqwalizer_errors#incompatible_types
   │                

  {atom(), string()} | [dynamic()] is not compatible with tuple()
  because
  [dynamic()] is not compatible with tuple()

error: index_out_of_bounds
   ┌─ check/src/custom.erl:47:5
   │
47 │     element(42, Tup).
   │     ^^^^^^^^^^^^^^^^ 42.
Tried to access element 42 of a tuple with 2 elements

See https://fb.me/eqwalizer_errors#index_out_of_bounds

error: incompatible_types
   ┌─ check/src/custom.erl:53:5
   │
53 │     element(N, Tup).
   │     ^^^^^^^^^^^^^^^ erlang:element(N, Tup).
Expression has type:   atom() | number() | string()
Context expected type: #D{dynamic() => dynamic()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
   ┌─ check/src/custom.erl:57:5
   │
57 │     element(N, Tup).
   │     ^^^^^^^^^^^^^^^
   │     │
   │     erlang:element(N, Tup).
Expression has type:   atom() | number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types
   │     

  atom() | number() is not compatible with atom()
  because
  number() is not compatible with atom()

error: incompatible_types
   ┌─ check/src/custom.erl:63:5
   │
63 │     element(1, Tup).
   │     ^^^^^^^^^^^^^^^ erlang:element(1, Tup).
Expression has type:   term()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
   ┌─ check/src/custom.erl:67:5
   │
67 │     element(1, Tup).
   │     ^^^^^^^^^^^^^^^ erlang:element(1, Tup).
Expression has type:   term() | number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
   ┌─ check/src/custom.erl:85:5
   │
85 │     element(N, Rec).
   │     ^^^^^^^^^^^^^^^
   │     │
   │     erlang:element(N, Rec).
Expression has type:   'foo' | 'ok' | 'error' | number() | string()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types
   │     

  'foo' | 'ok' | 'error' | number() | string() is not compatible with atom()
  because
  string() is not compatible with atom()

error: incompatible_types
    ┌─ check/src/custom.erl:107:5
    │
107 │     maps:get(K, M).
    │     ^^^^^^^^^^^^^^ maps:get(K, M).
Expression has type:   number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:127:5
    │
127 │     Res.
    │     ^^^ Res.
Expression has type:   number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:153:12
    │
153 │     get(a, M).
    │            ^ M.
Expression has type:   term()
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:159:23
    │
159 │     Res = maps:get(a, M),
    │                       ^ M.
Expression has type:   term()
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:166:17
    │
166 │     maps:get(a, M, false).
    │                 ^ M.
Expression has type:   term()
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:172:23
    │
172 │     Res = maps:get(a, M, false),
    │                       ^ M.
Expression has type:   term()
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:192:5
    │
192 │     maps:get(K, M, 0).
    │     ^^^^^^^^^^^^^^^^^
    │     │
    │     maps:get(K, M, 0).
Expression has type:   atom() | number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types
    │     

  atom() | number() is not compatible with atom()
  because
  number() is not compatible with atom()

error: incompatible_types
    ┌─ check/src/custom.erl:199:5
    │
199 │     Res.
    │     ^^^
    │     │
    │     Res.
Expression has type:   atom() | number()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types
    │     

  atom() | number() is not compatible with atom()
  because
  number() is not compatible with atom()

error: incompatible_types
    ┌─ check/src/custom.erl:205:5
    │    
205 │ ╭ ╭     {
206 │ │ │         maps:get(a, M, undefined),
207 │ │ │         maps:get(n, M, undefined)
208 │ │ │     }.
    │ ╰─│─────^ {maps:get('a', M, 'undefined'), maps:get('n', M, 'undefined')}.
Expression has type:   {atom(), number() | 'undefined'}
Context expected type: {atom(), number()}

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰─────' 

  at tuple index 2:
  {atom(), number() | 'undefined'} is not compatible with {atom(), number()}
  because
  number() | 'undefined' is not compatible with number()
  because
  'undefined' is not compatible with number()

error: incompatible_types
    ┌─ check/src/custom.erl:220:27
    │
220 │ map_get_2_17_neg(V, M) -> maps:get(V, M).
    │                           ^^^^^^^^^^^^^^
    │                           │
    │                           maps:get(V, M).
Expression has type:   'a_v' | 'c_v'
Context expected type: 'a_v' | 'b_v'

See https://fb.me/eqwalizer_errors#incompatible_types
    │                           

  'a_v' | 'c_v' is not compatible with 'a_v' | 'b_v'
  because
  'c_v' is not compatible with 'a_v' | 'b_v'
  because
  'c_v' is not compatible with 'a_v'

error: incompatible_types
    ┌─ check/src/custom.erl:232:27
    │
232 │ map_get_3_19_neg(V, M) -> maps:get(V, M, undefined).
    │                           ^^^^^^^^^^^^^^^^^^^^^^^^^
    │                           │
    │                           maps:get(V, M, 'undefined').
Expression has type:   'a_v' | 'c_v' | 'undefined'
Context expected type: 'a_v' | 'b_v' | 'undefined'

See https://fb.me/eqwalizer_errors#incompatible_types
    │                           

  'a_v' | 'c_v' | 'undefined' is not compatible with 'a_v' | 'b_v' | 'undefined'
  because
  'c_v' is not compatible with 'a_v' | 'b_v' | 'undefined'
  because
  'c_v' is not compatible with 'a_v'

error: incompatible_types
    ┌─ check/src/custom.erl:308:5
    │
308 │     Res.
    │     ^^^ Res.
Expression has type:   {'value', #S{}} | 'false'
Context expected type: 'nok'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:362:23
    │
362 │         fun (_, _) -> self() end,
    │                       ^^^^^^ erlang:self().
Expression has type:   pid()
Context expected type: boolean()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:373:17
    │
373 │     maps:filter(F, M).
    │                 ^
    │                 │
    │                 F.
Expression has type:   fun((none(), none()) -> term())
Context expected type: fun((number(), 'a' | 'b') -> boolean())

See https://fb.me/eqwalizer_errors#incompatible_types
    │                 

  fun((none(), none()) -> term()) is not compatible with fun((number(), 'a' | 'b') -> boolean())
  because
  term() is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:381:17
    │
381 │     maps:filter(F, M).
    │                 ^ F.
Expression has type:   fun(() -> pid())
Context expected type: fun((number(), 'a' | 'b') -> boolean())

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:388:17
    │
388 │     maps:filter(F, M).
    │                 ^ F.
Expression has type:   fun((fun((T) -> boolean()), [T]) -> [T]) with 1 type parameter
Context expected type: fun((number(), 'a' | 'b') -> boolean()) with 0 type parameters

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:412:37
    │
412 │     maps:filter(fun erlang:'=:='/2, X).
    │                                     ^
    │                                     │
    │                                     X.
Expression has type:   #D{K => V} | 'a'
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types
    │                                     

  #D{K => V} | 'a' is not compatible with #D{term() => term()}
  because
  'a' is not compatible with #D{term() => term()}

error: incompatible_types
    ┌─ check/src/custom.erl:424:20
    │
424 │     maps:filter(F, non_kv),
    │                    ^^^^^^ 'non_kv'.
Expression has type:   'non_kv'
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:453:5
    │    
453 │ ╭ ╭     maps:map(
454 │ │ │         fun (_, _) -> self() end,
455 │ │ │         M
456 │ │ │     ).
    │ ╰─│─────^ maps:map(fun, M).
Expression has type:   #D{number() => pid()}
Context expected type: #D{number() => boolean()}

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰─────' 

  #D{number() => pid()} is not compatible with #D{number() => boolean()}
  because
  pid() is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:465:14
    │
465 │     maps:map(F, M).
    │              ^
    │              │
    │              F.
Expression has type:   fun((none(), none()) -> term())
Context expected type: fun((number(), 'a' | 'b') -> term())

See https://fb.me/eqwalizer_errors#incompatible_types
    │              

  fun((none(), none()) -> term()) is not compatible with fun((number(), 'a' | 'b') -> term())
  because
  number() is not compatible with none()

error: incompatible_types
    ┌─ check/src/custom.erl:473:14
    │
473 │     maps:map(F, M).
    │              ^ F.
Expression has type:   fun(() -> pid())
Context expected type: fun((number(), 'a' | 'b') -> term())

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:480:14
    │
480 │     maps:map(F, M).
    │              ^ F.
Expression has type:   fun((fun((A) -> B), [A]) -> [B]) with 2 type parameters
Context expected type: fun((number(), 'a' | 'b') -> term()) with 0 type parameters

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:496:5
    │
496 │     maps:map(F, M).
    │     ^^^^^^^^^^^^^^ maps:map(F, M).
Expression has type:   dict  map #D{'a' | 'b' => boolean()}
Context expected type: shape map #S{a => 'a', b => 'b'}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:502:17
    │
502 │     maps:map(F, non_kv),
    │                 ^^^^^^ 'non_kv'.
Expression has type:   'non_kv'
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: fun_arity_mismatch
    ┌─ check/src/custom.erl:521:9
    │
521 │         fun (K, V) -> [K, V] end, [], M).
    │         ^^^^^^^^^^^^^^^^^^^^^^^^ fun.
fun with arity 2 used as fun with 3 arguments

See https://fb.me/eqwalizer_errors#fun_arity_mismatch

error: incompatible_types
    ┌─ check/src/custom.erl:528:28
    │
528 │         fun (_, _, Acc) -> [Acc] end,
    │                            ^^^^^
    │                            │
    │                            [Acc].
Expression has type:   [[[[]]]]
Context expected type: [[[]]]

See https://fb.me/eqwalizer_errors#incompatible_types
    │                            

  [[[[]]]] is not compatible with [[[]]]
  because
  [[[]]] is not compatible with [[]]
  because
  [[]] is not compatible with []

error: incompatible_types
    ┌─ check/src/custom.erl:538:9
    │
538 │         non_kv
    │         ^^^^^^ 'non_kv'.
Expression has type:   'non_kv'
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:561:5
    │    
561 │ ╭ ╭     maps:fold(
562 │ │ │         fun (_K, A, _Acc) -> A end,
563 │ │ │         [],
564 │ │ │         M
565 │ │ │     ).
    │ ╰─│─────^ maps:fold(fun, [], M).
Expression has type:   [] | atom()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰─────' 

  [] | atom() is not compatible with atom()
  because
  [] is not compatible with atom()

error: incompatible_types
    ┌─ check/src/custom.erl:584:9
    │
584 │         fun folder_bad/3,
    │         ^^^^^^^^^^^^^^^^ folder_bad/3.
Expression has type:   fun((term(), term(), Acc) -> [Acc]) with 1 type parameter
Context expected type: fun((number(), 'a', []) -> term()) with 0 type parameters

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:619:5
    │    
619 │ ╭ ╭     maps:fold(
620 │ │ │         fun
621 │ │ │             (_K, {i, I}, Acc) ->
622 │ │ │                 [I | Acc];
    · │ │
629 │ │ │         M
630 │ │ │     ).
    │ ╰─│─────^ maps:fold(fun, [], M).
Expression has type:   [number() | binary() | atom()]
Context expected type: [binary()] | [number()] | [atom()]

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰─────' 

  [number() | binary() | atom()] is not compatible with [binary()] | [number()] | [atom()]
  because
  [number() | binary() | atom()] is not compatible with [binary()]
  because
  number() | binary() | atom() is not compatible with binary()
  because
  number() is not compatible with binary()

error: incompatible_types
    ┌─ check/src/custom.erl:650:9
    │
650 │         fun erlang:binary_to_list/1,
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:binary_to_list/1.
Expression has type:   fun((binary()) -> [number()])
Context expected type: fun((number()) -> boolean() | {'true', term()})

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((binary()) -> [number()]) is not compatible with fun((number()) -> boolean() | {'true', term()})
  because
  [number()] is not compatible with boolean() | {'true', term()}
  because
  [number()] is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:668:20
    │
668 │             (3) -> wrong_ret end,
    │                    ^^^^^^^^^
    │                    │
    │                    'wrong_ret'.
Expression has type:   'wrong_ret'
Context expected type: boolean() | {'true', term()}

See https://fb.me/eqwalizer_errors#incompatible_types
    │                    

  'wrong_ret' is not compatible with boolean() | {'true', term()}
  because
  'wrong_ret' is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:678:9
    │
678 │         not_a_list
    │         ^^^^^^^^^^ 'not_a_list'.
Expression has type:   'not_a_list'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:720:17
    │
720 │                 Res
    │                 ^^^
    │                 │
    │                 Res.
Expression has type:   {'true', 'a'} | 'wrong_ret'
Context expected type: boolean() | {'true', term()}

See https://fb.me/eqwalizer_errors#incompatible_types
    │                 

  {'true', 'a'} | 'wrong_ret' is not compatible with boolean() | {'true', term()}
  because
  'wrong_ret' is not compatible with boolean() | {'true', term()}
  because
  'wrong_ret' is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:756:9
    │    
756 │ ╭ ╭         fun (a) -> [a];
757 │ │ │             (b) -> true;
758 │ │ │             (c) -> wrong_ret end,
    │ ╰─│────────────────────────────────^ fun.
Expression has type:   fun(('a' | 'b') -> ['a'] | 'true' | 'wrong_ret')
Context expected type: fun(('a' | 'b') -> boolean() | ['a' | 'b'])

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰────────────────────────────────' 

  fun(('a' | 'b') -> ['a'] | 'true' | 'wrong_ret') is not compatible with fun(('a' | 'b') -> boolean() | ['a' | 'b'])
  because
  ['a'] | 'true' | 'wrong_ret' is not compatible with boolean() | ['a' | 'b']
  because
  'wrong_ret' is not compatible with boolean() | ['a' | 'b']
  because
  'wrong_ret' is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:768:9
    │
768 │         not_a_queue
    │         ^^^^^^^^^^^ 'not_a_queue'.
Expression has type:   'not_a_queue'
Context expected type: queue:queue(Item)

See https://fb.me/eqwalizer_errors#incompatible_types

error: fun_arity_mismatch
    ┌─ check/src/custom.erl:775:9
    │  
775 │ ╭         fun (wrong, arity) ->
776 │ │             [a]
777 │ │         end,
    │ ╰───────────^ fun.
fun with arity 2 used as fun with 1 arguments

See https://fb.me/eqwalizer_errors#fun_arity_mismatch

error: incompatible_types
    ┌─ check/src/custom.erl:786:9
    │    
786 │ ╭ ╭         fun (1) -> {true, a};
787 │ │ │             (X) -> case X of
788 │ │ │                        true ->
789 │ │ │                            [a];
    · │ │
792 │ │ │                    end
793 │ │ │         end,
    │ ╰─│───────────^ fun.
Expression has type:   fun(('a' | 'b') -> ['a'] | 'false' | {'true', 'a'})
Context expected type: fun(('a' | 'b') -> boolean() | ['a' | 'b'])

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰───────────' 

  fun(('a' | 'b') -> ['a'] | 'false' | {'true', 'a'}) is not compatible with fun(('a' | 'b') -> boolean() | ['a' | 'b'])
  because
  ['a'] | 'false' | {'true', 'a'} is not compatible with boolean() | ['a' | 'b']
  because
  {'true', 'a'} is not compatible with boolean() | ['a' | 'b']
  because
  {'true', 'a'} is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:802:9
    │    
802 │ ╭ ╭         fun (a) -> [a];
803 │ │ │             (X) ->
804 │ │ │                 Res = case X of
805 │ │ │                           true ->
    · │ │
810 │ │ │                 Res
811 │ │ │         end,
    │ ╰─│───────────^ fun.
Expression has type:   fun(('a' | 'b') -> ['a'] | 'wrong_ret')
Context expected type: fun(('a' | 'b') -> boolean() | ['a' | 'b'])

See https://fb.me/eqwalizer_errors#incompatible_types
    │   ╰───────────' 

  fun(('a' | 'b') -> ['a'] | 'wrong_ret') is not compatible with fun(('a' | 'b') -> boolean() | ['a' | 'b'])
  because
  ['a'] | 'wrong_ret' is not compatible with boolean() | ['a' | 'b']
  because
  'wrong_ret' is not compatible with boolean() | ['a' | 'b']
  because
  'wrong_ret' is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:820:9
    │
820 │         fun list_to_atom/1,
    │         ^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:list_to_atom/1.
Expression has type:   fun((string()) -> atom())
Context expected type: fun((none()) -> boolean() | [none()])

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((string()) -> atom()) is not compatible with fun((none()) -> boolean() | [none()])
  because
  atom() is not compatible with boolean() | [none()]
  because
  atom() is not compatible with boolean()

error: incompatible_types
    ┌─ check/src/custom.erl:829:9
    │
829 │         fun atom_to_list/1,
    │         ^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:atom_to_list/1.
Expression has type:   fun((atom()) -> string())
Context expected type: fun((atom()) -> boolean() | [atom()])

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((atom()) -> string()) is not compatible with fun((atom()) -> boolean() | [atom()])
  because
  string() is not compatible with boolean() | [atom()]

error: incompatible_types
    ┌─ check/src/custom.erl:838:9
    │
838 │         fun atom_to_list/1,
    │         ^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:atom_to_list/1.
Expression has type:   fun((atom()) -> string())
Context expected type: fun((atom()) -> boolean() | [atom()])

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((atom()) -> string()) is not compatible with fun((atom()) -> boolean() | [atom()])
  because
  string() is not compatible with boolean() | [atom()]

error: incompatible_types
    ┌─ check/src/custom.erl:848:9
    │
848 │         fun atom_to_list/1,
    │         ^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:atom_to_list/1.
Expression has type:   fun((atom()) -> string())
Context expected type: fun((atom()) -> boolean() | [atom()])

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((atom()) -> string()) is not compatible with fun((atom()) -> boolean() | [atom()])
  because
  string() is not compatible with boolean() | [atom()]

error: incompatible_types
    ┌─ check/src/custom.erl:856:9
    │
856 │         fun atom_to_list/1,
    │         ^^^^^^^^^^^^^^^^^^
    │         │
    │         erlang:atom_to_list/1.
Expression has type:   fun((atom()) -> string())
Context expected type: fun((atom()) -> boolean() | [atom()])

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  fun((atom()) -> string()) is not compatible with fun((atom()) -> boolean() | [atom()])
  because
  string() is not compatible with boolean() | [atom()]

error: incompatible_types
    ┌─ check/src/custom.erl:887:9
    │
887 │         non_tuple
    │         ^^^^^^^^^ 'non_tuple'.
Expression has type:   'non_tuple'
Context expected type: tuple()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:897:9
    │
897 │         [non_tuple],
    │         ^^^^^^^^^^^
    │         │
    │         ['non_tuple'].
Expression has type:   ['non_tuple']
Context expected type: [tuple()]

See https://fb.me/eqwalizer_errors#incompatible_types
    │         

  ['non_tuple'] is not compatible with [tuple()]
  because
  'non_tuple' is not compatible with tuple()

error: incompatible_types
    ┌─ check/src/custom.erl:906:9
    │
906 │         non_list,
    │         ^^^^^^^^ 'non_list'.
Expression has type:   'non_list'
Context expected type: [tuple()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:940:25
    │
940 │     lists:keytake(a, 1, non_tup),
    │                         ^^^^^^^ 'non_tup'.
Expression has type:   'non_tup'
Context expected type: [Tuple]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:945:25
    │
945 │     lists:keytake(a, 1, non_list),
    │                         ^^^^^^^^ 'non_list'.
Expression has type:   'non_list'
Context expected type: [Tuple]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:950:22
    │
950 │     lists:keytake(a, non_num, []),
    │                      ^^^^^^^ 'non_num'.
Expression has type:   'non_num'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:967:15
    │
967 │     lists:sum([a, 1]).
    │               ^^^^^^
    │               │
    │               ['a', 1].
Expression has type:   ['a' | number()]
Context expected type: [number()]

See https://fb.me/eqwalizer_errors#incompatible_types
    │               

  ['a' | number()] is not compatible with [number()]
  because
  'a' | number() is not compatible with number()
  because
  'a' is not compatible with number()

error: incompatible_types
    ┌─ check/src/custom.erl:971:15
    │
971 │     lists:sum(not_a_list).
    │               ^^^^^^^^^^ 'not_a_list'.
Expression has type:   'not_a_list'
Context expected type: [number()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
    ┌─ check/src/custom.erl:991:15
    │
991 │     lists:max(not_a_list).
    │               ^^^^^^^^^^ 'not_a_list'.
Expression has type:   'not_a_list'
Context expected type: [T]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1011:15
     │
1011 │     lists:min(not_a_list).
     │               ^^^^^^^^^^ 'not_a_list'.
Expression has type:   'not_a_list'
Context expected type: [T]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1029:5
     │
1029 │     proplists:get_value(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('k', L).
Expression has type:   term()
Context expected type: pid() | 'undefined'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with pid() | 'undefined'
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1035:5
     │
1035 │     proplists:get_value(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('k', L).
Expression has type:   term()
Context expected type: pid() | 'undefined' | 'v'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with pid() | 'undefined' | 'v'
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1040:5
     │
1040 │     proplists:get_value(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_value('k', L).
Expression has type:   term()
Context expected type: pid()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1046:5
     │
1046 │     proplists:get_value(k, L, 3).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('k', L, 3).
Expression has type:   term()
Context expected type: pid() | number()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with pid() | number()
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1052:5
     │
1052 │     proplists:get_value(k, L, my_default).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('k', L, 'my_default').
Expression has type:   term()
Context expected type: 'v1' | 'v2' | 'my_default'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with 'v1' | 'v2' | 'my_default'
  because
  term() is not compatible with 'v1'

error: incompatible_types
     ┌─ check/src/custom.erl:1058:5
     │
1058 │     proplists:get_value(k, L, my_default).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_value('k', L, 'my_default').
Expression has type:   term()
Context expected type: 'v'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1063:28
     │
1063 │     proplists:get_value(k, b).
     │                            ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1068:5
     │
1068 │     proplists:get_value(k, []).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_value('k', []).
Expression has type:   term()
Context expected type: 'default'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1073:1
     │
1073 │ proplists:get_value(k, [], my_default).
     │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_value('k', [], 'my_default').
Expression has type:   term()
Context expected type: 'my_default'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1078:28
     │
1078 │     proplists:get_value(k, b, my_default).
     │                            ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1083:5
     │
1083 │     proplists:get_bool(b, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_bool('b', L).
Expression has type:   boolean()
Context expected type: 'true'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1089:5
     │
1089 │     proplists:get_all_values(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_all_values('k', L).
Expression has type:   [term()]
Context expected type: [pid() | 'default']

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [term()] is not compatible with [pid() | 'default']
  because
  term() is not compatible with pid() | 'default'
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1095:5
     │
1095 │     proplists:get_all_values(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_all_values('k', L).
Expression has type:   [term()]
Context expected type: [pid() | 'default' | 'v']

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [term()] is not compatible with [pid() | 'default' | 'v']
  because
  term() is not compatible with pid() | 'default' | 'v'
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1100:5
     │
1100 │     proplists:get_all_values(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_all_values('k', L).
Expression has type:   [term()]
Context expected type: [pid()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [term()] is not compatible with [pid()]
  because
  term() is not compatible with pid()

error: incompatible_types
     ┌─ check/src/custom.erl:1105:5
     │
1105 │     proplists:get_all_values(k, []).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:get_all_values('k', []).
Expression has type:   [term()]
Context expected type: []

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1110:33
     │
1110 │     proplists:get_all_values(k, b).
     │                                 ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1115:27
     │
1115 │     proplists:get_bool(b, b).
     │                           ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1120:5
     │
1120 │     proplists:get_keys(L).
     │     ^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_keys(L).
Expression has type:   [term()]
Context expected type: ['c']

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [term()] is not compatible with ['c']
  because
  term() is not compatible with 'c'

error: incompatible_types
     ┌─ check/src/custom.erl:1126:5
     │
1126 │     proplists:get_keys(L).
     │     ^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_keys(L).
Expression has type:   [term()]
Context expected type: ['a' | 'b' | 'c']

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [term()] is not compatible with ['a' | 'b' | 'c']
  because
  term() is not compatible with 'a' | 'b' | 'c'
  because
  term() is not compatible with 'a'

error: incompatible_types
     ┌─ check/src/custom.erl:1131:24
     │
1131 │     proplists:get_keys(a).
     │                        ^ 'a'.
Expression has type:   'a'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1136:5
     │    
1136 │ ╭ ╭     proplists:get_keys(
1137 │ │ │         [{a, b, c}]
1138 │ │ │     ).
     │ ╰─│─────^ proplists:get_keys([{'a', 'b', 'c'}]).
Expression has type:   [term()]
Context expected type: ['a']

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  [term()] is not compatible with ['a']
  because
  term() is not compatible with 'a'

error: incompatible_types
     ┌─ check/src/custom.erl:1144:5
     │
1144 │     proplists:get_value(k, L).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('k', L).
Expression has type:   term()
Context expected type: 'a' | pid()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with 'a' | pid()
  because
  term() is not compatible with 'a'

error: incompatible_types
     ┌─ check/src/custom.erl:1149:28
     │
1149 │     proplists:get_value(k, b).
     │                            ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1154:1
     │
1154 │ proplists:lookup(self(), [a, {b, true}]).
     │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ proplists:lookup(erlang:self(), ['a', {'b', 'true'}]).
Expression has type:   'none' | tuple()
Context expected type: {'b', 'true'}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1158:25
     │
1158 │     proplists:lookup(a, b).
     │                         ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1163:1
     │
1163 │ proplists:lookup(self(), [a, {b, true}]).
     │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │ │
     │ proplists:lookup(erlang:self(), ['a', {'b', 'true'}]).
Expression has type:   'none' | tuple()
Context expected type: 'none' | {'a', 'true'} | {'b', 'true'}

See https://fb.me/eqwalizer_errors#incompatible_types
     │ 

  'none' | tuple() is not compatible with 'none' | {'a', 'true'} | {'b', 'true'}
  because
  tuple() is not compatible with 'none' | {'a', 'true'} | {'b', 'true'}
  because
  tuple() is not compatible with 'none'

error: incompatible_types
     ┌─ check/src/custom.erl:1168:5
     │
1168 │     proplists:lookup(k, []).
     │     ^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:lookup('k', []).
Expression has type:   'none' | tuple()
Context expected type: 'none'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  'none' | tuple() is not compatible with 'none'
  because
  tuple() is not compatible with 'none'

error: incompatible_types
     ┌─ check/src/custom.erl:1173:5
     │    
1173 │ ╭ ╭     proplists:lookup_all(
1174 │ │ │         self(),
1175 │ │ │         [a, {b, true}]
1176 │ │ │     ).
     │ ╰─│─────^ proplists:lookup_all(erlang:self(), ['a', {'b', 'true'}]).
Expression has type:   [tuple()]
Context expected type: [{'b', 'true'}]

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  [tuple()] is not compatible with [{'b', 'true'}]
  because
  tuple() is not compatible with {'b', 'true'}

error: incompatible_types
     ┌─ check/src/custom.erl:1181:29
     │
1181 │     proplists:lookup_all(a, b).
     │                             ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1186:5
     │    
1186 │ ╭ ╭     proplists:lookup_all(
1187 │ │ │         self(),
1188 │ │ │         [a, {b, true}]
1189 │ │ │     ).
     │ ╰─│─────^ proplists:lookup_all(erlang:self(), ['a', {'b', 'true'}]).
Expression has type:   [tuple()]
Context expected type: [{'a', 'true'} | {'b', 'true'}]

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  [tuple()] is not compatible with [{'a', 'true'} | {'b', 'true'}]
  because
  tuple() is not compatible with {'a', 'true'} | {'b', 'true'}
  because
  tuple() is not compatible with {'a', 'true'}

error: incompatible_types
     ┌─ check/src/custom.erl:1194:5
     │  
1194 │ ╭     proplists:lookup_all(
1195 │ │         self(),
1196 │ │         []
1197 │ │     ).
     │ ╰─────^ proplists:lookup_all(erlang:self(), []).
Expression has type:   [tuple()]
Context expected type: []

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1220:34
     │
1220 │     proplists:is_defined(self(), b).
     │                                  ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1224:25
     │
1224 │     proplists:delete(k, b).
     │                         ^ 'b'.
Expression has type:   'b'
Context expected type: [A]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1240:5
     │
1240 │     proplists:split(L, Ks).
     │     ^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:split(L, Ks).
Expression has type:   {[[term()]], [term()]}
Context expected type: {[plist('a', 'b')], plist('a', 'b')}

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  at tuple index 1:
  {[[term()]], [term()]} is not compatible with {[plist('a', 'b')], plist('a', 'b')}
  because
  [[term()]] is not compatible with [plist('a', 'b')]
  because
  [term()] is not compatible with plist('a', 'b')
  because
  [term()] is not compatible with ['a' | {'a', 'b'}]

error: incompatible_types
     ┌─ check/src/custom.erl:1244:21
     │
1244 │     proplists:split(b, []).
     │                     ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1248:25
     │
1248 │     proplists:split([], b).
     │                         ^ 'b'.
Expression has type:   'b'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1253:22
     │
1253 │     proplists:to_map(b).
     │                      ^ 'b'.
Expression has type:   'b'
Context expected type: [atom() | {term(), term()} | term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1287:24
     │
1287 │     proplists:from_map(b).
     │                        ^ 'b'.
Expression has type:   'b'
Context expected type: #D{K => V}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1292:5
     │
1292 │     proplists:get_value(a, [a]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('a', ['a']).
Expression has type:   term()
Context expected type: 'true' | 'undefined'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with 'true' | 'undefined'
  because
  term() is not compatible with 'true'

error: incompatible_types
     ┌─ check/src/custom.erl:1297:5
     │
1297 │     proplists:get_value(X, [a]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value(X, ['a']).
Expression has type:   term()
Context expected type: 'true' | 'undefined'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with 'true' | 'undefined'
  because
  term() is not compatible with 'true'

error: incompatible_types
     ┌─ check/src/custom.erl:1302:5
     │
1302 │     proplists:get_value(a, [a], b).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     proplists:get_value('a', ['a'], 'b').
Expression has type:   term()
Context expected type: 'true' | 'b'

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  term() is not compatible with 'true' | 'b'
  because
  term() is not compatible with 'true'

error: incompatible_types
     ┌─ check/src/custom.erl:1309:20
     │
1309 │         {ok, N} -> N
     │                    ^
     │                    │
     │                    N.
Expression has type:   eqwalizer:dynamic()
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types
     │                    

  eqwalizer:dynamic() is not compatible with number()
  because
  term() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:1317:20
     │
1317 │         {ok, N} -> N
     │                    ^
     │                    │
     │                    N.
Expression has type:   eqwalizer:dynamic()
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types
     │                    

  eqwalizer:dynamic() is not compatible with number()
  because
  term() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:1325:5
     │
1325 │     application:get_env(A, K, U).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     application:get_env(A, K, U).
Expression has type:   eqwalizer:dynamic()
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  eqwalizer:dynamic() is not compatible with number()
  because
  term() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:1341:5
     │
1341 │     Res.
     │     ^^^
     │     │
     │     Res.
Expression has type:   [eqwalizer:dynamic()]
Context expected type: ['anything']

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [eqwalizer:dynamic()] is not compatible with ['anything']
  because
  eqwalizer:dynamic() is not compatible with 'anything'
  because
  term() is not compatible with 'anything'

error: incompatible_types
     ┌─ check/src/custom.erl:1345:5
     │
1345 │     file:consult(some_file).
     │     ^^^^^^^^^^^^^^^^^^^^^^^ file:consult('some_file').
Expression has type:   {'ok', [eqwalizer:dynamic()]} | {'error', {number(), atom(), term()} | 'terminated' | 'badarg' | file:posix() | 'system_limit'}
Context expected type: 'nok'

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1357:5
     │
1357 │     lists:keysort(2, [{a, c}, {b, d}]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lists:keysort(2, [{'a', 'c'}, {'b', 'd'}]).
Expression has type:   [{'a', 'c'} | {'b', 'd'}]
Context expected type: none()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1361:22
     │
1361 │     lists:keysort(1, [3]).
     │                      ^^^
     │                      │
     │                      [3].
Expression has type:   [number()]
Context expected type: [tuple()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │                      

  [number()] is not compatible with [tuple()]
  because
  number() is not compatible with tuple()

error: incompatible_types
     ┌─ check/src/custom.erl:1377:5
     │    
1377 │ ╭ ╭     lists:filtermap(
1378 │ │ │         fun(X) when X div 2 =:= 0 ->
1379 │ │ │             {true, integer_to_list(X)};
1380 │ │ │         (X) ->
     · │ │
1383 │ │ │         [1, 2, 3, 4]
1384 │ │ │     ).
     │ ╰─│─────^ lists:filtermap(fun, [1, 2, 3, 4]).
Expression has type:   [string() | number()]
Context expected type: [number()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  [string() | number()] is not compatible with [number()]
  because
  string() | number() is not compatible with number()
  because
  string() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:1411:5
     │
1411 │     erlang:min(X, Y).
     │     ^^^^^^^^^^^^^^^^ erlang:min(X, Y).
Expression has type:   atom() | number()
Context expected type: none()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1426:5
     │
1426 │     erlang:max(X, Y).
     │     ^^^^^^^^^^^^^^^^ erlang:max(X, Y).
Expression has type:   atom() | number()
Context expected type: none()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1452:9
     │
1452 │     abs(Atom).
     │         ^^^^ Atom.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1465:31
     │
1465 │ seq3_4_wip_neg() -> lists:seq(a, 2, 1).
     │                               ^ 'a'.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1468:30
     │
1468 │ seq3_5_neg() -> lists:seq(1, a, 1).
     │                              ^ 'a'.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1471:33
     │
1471 │ seq3_6_neg() -> lists:seq(1, 2, a).
     │                                 ^ 'a'.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1499:31
     │
1499 │ seq2_4_wip_neg() -> lists:seq(a, 2).
     │                               ^ 'a'.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1502:30
     │
1502 │ seq2_5_neg() -> lists:seq(1, a).
     │                              ^ 'a'.
Expression has type:   'a'
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1551:5
     │  
1551 │ ╭     timer:tc(
1552 │ │         fun() ->
1553 │ │             err
1554 │ │         end
1555 │ │     ).
     │ ╰─────^ timer:tc(fun).
Expression has type:   {number(), 'err'}
Context expected type: pid()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1560:5
     │
1560 │     ets:lookup(tab, Any).
     │     ^^^^^^^^^^^^^^^^^^^^
     │     │
     │     ets:lookup('tab', Any).
Expression has type:   [eqwalizer:dynamic()]
Context expected type: [{'whatev'} | {number()}]

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [eqwalizer:dynamic()] is not compatible with [{'whatev'} | {number()}]
  because
  eqwalizer:dynamic() is not compatible with {'whatev'} | {number()}
  because
  term() is not compatible with {'whatev'} | {number()}
  because
  term() is not compatible with {'whatev'}

error: incompatible_types
     ┌─ check/src/custom.erl:1564:5
     │
1564 │     ets:lookup(tab, Any).
     │     ^^^^^^^^^^^^^^^^^^^^ ets:lookup('tab', Any).
Expression has type:   [eqwalizer:dynamic()]
Context expected type: pid()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1568:16
     │
1568 │     ets:lookup("not atom", Any).
     │                ^^^^^^^^^^ string_lit.
Expression has type:   string()
Context expected type: ets:tab()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1573:5
     │
1573 │     ets:lookup(tab, Any).
     │     ^^^^^^^^^^^^^^^^^^^^
     │     │
     │     ets:lookup('tab', Any).
Expression has type:   [eqwalizer:dynamic()]
Context expected type: [tuple()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [eqwalizer:dynamic()] is not compatible with [tuple()]
  because
  eqwalizer:dynamic() is not compatible with tuple()
  because
  term() is not compatible with tuple()

error: incompatible_types
     ┌─ check/src/custom.erl:1583:5
     │
1583 │     ets:tab2list(Atom).
     │     ^^^^^^^^^^^^^^^^^^
     │     │
     │     ets:tab2list(Atom).
Expression has type:   [eqwalizer:dynamic()]
Context expected type: [tuple()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [eqwalizer:dynamic()] is not compatible with [tuple()]
  because
  eqwalizer:dynamic() is not compatible with tuple()
  because
  term() is not compatible with tuple()

error: incompatible_types
     ┌─ check/src/custom.erl:1588:5
     │
1588 │     ets:tab2list(Atom).
     │     ^^^^^^^^^^^^^^^^^^
     │     │
     │     ets:tab2list(Atom).
Expression has type:   [eqwalizer:dynamic()]
Context expected type: [{'whatev'} | {number()}]

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  [eqwalizer:dynamic()] is not compatible with [{'whatev'} | {number()}]
  because
  eqwalizer:dynamic() is not compatible with {'whatev'} | {number()}
  because
  term() is not compatible with {'whatev'} | {number()}
  because
  term() is not compatible with {'whatev'}

error: incompatible_types
     ┌─ check/src/custom.erl:1592:18
     │
1592 │     ets:tab2list("not atom").
     │                  ^^^^^^^^^^ string_lit.
Expression has type:   string()
Context expected type: ets:tab()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1631:23
     │
1631 │     lists:flatten([], 1).
     │                       ^ 1.
Expression has type:   number()
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1640:19
     │
1640 │     lists:flatten(3).
     │                   ^ 3.
Expression has type:   number()
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1653:8
     │
1653 │     -> lists:flatten(X).
     │        ^^^^^^^^^^^^^^^^
     │        │
     │        lists:flatten(X).
Expression has type:   [{A, B} | {B, A}]
Context expected type: [{A, B}]

See https://fb.me/eqwalizer_errors#incompatible_types
     │        

  [{A, B} | {B, A}] is not compatible with [{A, B}]
  because
  {A, B} | {B, A} is not compatible with {A, B}
  because
  at tuple index 1:
  {B, A} is not compatible with {A, B}
  because
  B is not compatible with A

error: incompatible_types
     ┌─ check/src/custom.erl:1686:5
     │    
1686 │ ╭ ╭     maps:without(
1687 │ │ │         [a, c, DOrE],
1688 │ │ │         #{
1689 │ │ │             a => ka,
     · │ │
1693 │ │ │         }
1694 │ │ │     ).
     │ ╰─│─────^ maps:without(['a', 'c', DOrE], #{..}).
Expression has type:   #S{a => 'ka', b => atom(), c => pid(), d => 'kd'}
Context expected type: #S{b => atom()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

These associations do not match:

  #S{
+    a => ...
+    c => ...
+    d => ...
     ...
  }

error: incompatible_types
     ┌─ check/src/custom.erl:1698:18
     │
1698 │     maps:without(non_list, #{}).
     │                  ^^^^^^^^ 'non_list'.
Expression has type:   'non_list'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1702:22
     │
1702 │     maps:without([], non_map).
     │                      ^^^^^^^ 'non_map'.
Expression has type:   'non_map'
Context expected type: #D{term() => term()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1747:5
     │    
1747 │ ╭ ╭     maps:without(
1748 │ │ │         Keys,
1749 │ │ │         #{a => self(), b => self()}
1750 │ │ │     ).
     │ ╰─│─────^ maps:without(Keys, #{..}).
Expression has type:   #S{a => pid(), b => pid()}
Context expected type: #S{b := pid()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

These associations do not match:

  #S{
+    a => ...
-    b := ...
+    b => ...
  }

error: incompatible_types
     ┌─ check/src/custom.erl:1756:12
     │
1756 │         [a | improper_tail],
     │            ^^^^^^^^^^^^^^^^ 'improper_tail'.
Expression has type:   'improper_tail'
Context expected type: [term()]

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:1766:5
     │    
1766 │ ╭ ╭     maps:without(
1767 │ │ │         Keys,
1768 │ │ │         #{a => ka, b => self()}
1769 │ │ │     ).
     │ ╰─│─────^ maps:without(Keys, #{..}).
Expression has type:   #S{a => 'ka', b => pid()}
Context expected type: #S{b := pid()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

These associations do not match:

  #S{
+    a => ...
-    b := ...
+    b => ...
  }

error: incompatible_types
     ┌─ check/src/custom.erl:1783:5
     │
1783 │     maps:without([a, b], M).
     │     ^^^^^^^^^^^^^^^^^^^^^^^ maps:without(['a', 'b'], M).
Expression has type:   #S{c := 'cv', d := 'dv'} | #S{c := 'cv', e => 'ev'}
Context expected type: #S{c := atom()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: not_enough_info_to_branch
     ┌─ check/src/custom.erl:1845:5
     │
1845 │     custom_overloaded(X).
     │     ^^^^^^^^^^^^^^^^^^^^ custom_overloaded(X).
Not enough info to branch. Arg types: term()

See https://fb.me/eqwalizer_errors#not_enough_info_to_branch

error: incompatible_types
     ┌─ check/src/custom.erl:1868:5
     │
1868 │     {A, N}.
     │     ^^^^^^
     │     │
     │     {A, N}.
Expression has type:   {atom(), number() | pid()}
Context expected type: {atom(), number()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  at tuple index 2:
  {atom(), number() | pid()} is not compatible with {atom(), number()}
  because
  number() | pid() is not compatible with number()
  because
  pid() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:1946:5
     │
1946 │     filename:join(["server", "erl"]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join([string_lit, string_lit]).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:1951:5
     │
1951 │     filename:join(["server", <<>>]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join([string_lit, <<..>>]).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:1956:5
     │
1956 │     filename:join([<<>>, ""]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join([<<..>>, string_lit]).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:1971:5
     │
1971 │     filename:join([<<>>, <<>>]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join([<<..>>, <<..>>]).
Expression has type:   file:filename_all()
Context expected type: binary()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with binary()
  because
  string() | binary() is not compatible with binary()
  because
  string() is not compatible with binary()

error: incompatible_types
     ┌─ check/src/custom.erl:1986:19
     │
1986 │     filename:join([<<>>, self()]).
     │                   ^^^^^^^^^^^^^^
     │                   │
     │                   [<<..>>, erlang:self()].
Expression has type:   [binary() | pid()]
Context expected type: [file:name_all()]

See https://fb.me/eqwalizer_errors#incompatible_types
     │                   

  [binary() | pid()] is not compatible with [file:name_all()]
  because
  binary() | pid() is not compatible with file:name_all()
  because
  binary() | pid() is not compatible with string() | atom() | file:deep_list() | binary()
  because
  pid() is not compatible with string() | atom() | file:deep_list() | binary()

error: incompatible_types
     ┌─ check/src/custom.erl:1991:5
     │
1991 │     filename:join("server", "erl").
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join(string_lit, string_lit).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:1996:5
     │
1996 │     filename:join("server", <<>>).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join(string_lit, <<..>>).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:2001:5
     │
2001 │     filename:join(<<>>, "").
     │     ^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join(<<..>>, string_lit).
Expression has type:   file:filename_all()
Context expected type: file:filename()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with file:filename()
  because
  string() | binary() is not compatible with file:filename()
  because
  string() | binary() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:2016:5
     │
2016 │     filename:join(atom, <<>>).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^
     │     │
     │     filename:join('atom', <<..>>).
Expression has type:   file:filename_all()
Context expected type: binary()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:filename_all() is not compatible with binary()
  because
  string() | binary() is not compatible with binary()
  because
  string() is not compatible with binary()

error: incompatible_types
     ┌─ check/src/custom.erl:2026:25
     │
2026 │     filename:join(<<>>, self()).
     │                         ^^^^^^
     │                         │
     │                         erlang:self().
Expression has type:   pid()
Context expected type: file:name_all()

See https://fb.me/eqwalizer_errors#incompatible_types
     │                         

  pid() is not compatible with file:name_all()
  because
  pid() is not compatible with string() | atom() | file:deep_list() | binary()
  because
  pid() is not compatible with string()

error: incompatible_types
     ┌─ check/src/custom.erl:2055:5
     │    
2055 │ ╭ ╭     queue:filter(
2056 │ │ │         fun my_filter1/1,
2057 │ │ │         Q
2058 │ │ │     ).
     │ ╰─│─────^ queue:filter(my_filter1/1, Q).
Expression has type:   queue:queue(atom() | number())
Context expected type: queue:queue(number())

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  queue:queue(atom() | number()) is not compatible with queue:queue(number())
  because
  atom() | number() is not compatible with number()
  because
  atom() is not compatible with number()

error: incompatible_types
     ┌─ check/src/custom.erl:2096:5
     │
2096 │     M3.
     │     ^^
     │     │
     │     M3.
Expression has type:   #S{count := number(), module := 'foo'} | #S{module := 'foo'}
Context expected type: state1()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  #S{count := number(), module := 'foo'} | #S{module := 'foo'} is not compatible with state1()
  because
  #S{count := number(), module := 'foo'} | #S{module := 'foo'} is not compatible with #S{count := number(), module := atom()}
  because
  #S{module := 'foo'} is not compatible with #S{count := number(), module := atom()}
  These associations do not match:

  #S{
-    count  := ...
     ...
  }

error: incompatible_types
     ┌─ check/src/custom.erl:2128:13
     │
2128 │             Atom + Sum
     │             ^^^^ Atom.
Expression has type:   atom()
Context expected type: number()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:2172:5
     │
2172 │     Device.
     │     ^^^^^^
     │     │
     │     Device.
Expression has type:   file:io_device()
Context expected type: file:fd()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:io_device() is not compatible with file:fd()
  because
  pid() | file:fd() is not compatible with file:fd()
  because
  pid() | file:fd() is not compatible with #file_descriptor{}
  because
  pid() is not compatible with #file_descriptor{}

error: incompatible_types
     ┌─ check/src/custom.erl:2179:5
     │
2179 │     Device.
     │     ^^^^^^
     │     │
     │     Device.
Expression has type:   file:io_device()
Context expected type: file:fd()

See https://fb.me/eqwalizer_errors#incompatible_types
     │     

  file:io_device() is not compatible with file:fd()
  because
  pid() | file:fd() is not compatible with file:fd()
  because
  pid() | file:fd() is not compatible with #file_descriptor{}
  because
  pid() is not compatible with #file_descriptor{}

error: incompatible_types
     ┌─ check/src/custom.erl:2198:5
     │
2198 │     maps:remove(A, M).
     │     ^^^^^^^^^^^^^^^^^ maps:remove(A, M).
Expression has type:   dict  map #D{atom() => number()}
Context expected type: shape map #S{a := number()}

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:2239:5
     │    
2239 │ ╭ ╭     maps:filtermap(
2240 │ │ │         fun
2241 │ │ │             (a, V) -> true;
2242 │ │ │             (b, V) -> {true, atom_to_binary(V)};
     · │ │
2245 │ │ │         M
2246 │ │ │     ).
     │ ╰─│─────^ maps:filtermap(fun, M).
Expression has type:   #S{a => atom() | binary(), b => atom() | binary(), c => atom() | binary()}
Context expected type: #S{a := atom(), b := binary()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

These associations do not match:

  #S{
-    a := ...
+    a => ...
-    b := ...
+    b => ...
+    c => ...
  }

error: incompatible_types
     ┌─ check/src/custom.erl:2261:5
     │    
2261 │ ╭ ╭     maps:filtermap(
2262 │ │ │         fun (_, V) ->
2263 │ │ │             {true, atom_to_binary(V)}
2264 │ │ │         end,
2265 │ │ │         M
2266 │ │ │     ).
     │ ╰─│─────^ maps:filtermap(fun, M).
Expression has type:   #D{atom() => binary()}
Context expected type: #D{atom() => atom()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │   ╰─────' 

  #D{atom() => binary()} is not compatible with #D{atom() => atom()}
  because
  binary() is not compatible with atom()

error: incompatible_types
     ┌─ check/src/custom.erl:2273:23
     │
2273 │         fun (_, _) -> err end,
     │                       ^^^
     │                       │
     │                       'err'.
Expression has type:   'err'
Context expected type: boolean() | {'true', term()}

See https://fb.me/eqwalizer_errors#incompatible_types
     │                       

  'err' is not compatible with boolean() | {'true', term()}
  because
  'err' is not compatible with boolean()

error: incompatible_types
     ┌─ check/src/custom.erl:2282:45
     │
2282 │         fun (_, V) -> {true, atom_to_binary(V)} end,
     │                                             ^ V.
Expression has type:   binary()
Context expected type: atom()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:2296:5
     │
2296 │     re:replace(Subj, "+", "-", [{return, binary}]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ re:replace(Subj, string_lit, string_lit, [{'return', 'binary'}]).
Expression has type:   binary()
Context expected type: string()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:2300:5
     │
2300 │     re:replace(Subj, "+", "-", [{return, list}]).
     │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ re:replace(Subj, string_lit, string_lit, [{'return', 'list'}]).
Expression has type:   string()
Context expected type: binary()

See https://fb.me/eqwalizer_errors#incompatible_types

error: incompatible_types
     ┌─ check/src/custom.erl:2304:22
     │
2304 │     Res = re:replace(Subj, "+", "-", [{return, list}]),
     │                      ^^^^
     │                      │
     │                      Subj.
Expression has type:   atom()
Context expected type: iodata() | unicode:charlist()

See https://fb.me/eqwalizer_errors#incompatible_types
     │                      

  atom() is not compatible with iodata() | unicode:charlist()
  because
  atom() is not compatible with iodata()

error: incompatible_types
     ┌─ check/src/custom.erl:2309:38
     │
2309 │     Res = re:replace(Subj, "+", "-", [{return, something}]),
     │                                      ^^^^^^^^^^^^^^^^^^^^^
     │                                      │
     │                                      [{'return', 'something'}].
Expression has type:   [{'return', 'something'}]
Context expected type: [{'newline', 'cr' | 'lf' | 'any' | 'crlf' | 'anycrlf'} | 'notempty_atstart' | 'noteol' | 'bsr_unicode' | 'notbol' | 'global' | {'match_limit_recursion', number()} | 'bsr_anycrlf' | re:compile_option() | {'match_limit', number()} | {'offset', number()} | 'notempty' | {'return', 'iodata' | 'list' | 'binary'} | 'anchored']

See https://fb.me/eqwalizer_errors#incompatible_types
     │                                      

  [{'return', 'something'}] is not compatible with [{'newline', 'cr' | 'lf' | 'any' | 'crlf' | 'anycrlf'} | 'notempty_atstart' | 'noteol' | 'bsr_unicode' | 'notbol' | 'global' | {'match_limit_recursion', number()} | 'bsr_anycrlf' | re:compile_option() | {'match_limit', number()} | {'offset', number()} | 'notempty' | {'return', 'iodata' | 'list' | 'binary'} | 'anchored']
  because
  {'return', 'something'} is not compatible with {'newline', 'cr' | 'lf' | 'any' | 'crlf' | 'anycrlf'} | 'notempty_atstart' | 'noteol' | 'bsr_unicode' | 'notbol' | 'global' | {'match_limit_recursion', number()} | 'bsr_anycrlf' | re:compile_option() | {'match_limit', number()} | {'offset', number()} | 'notempty' | {'return', 'iodata' | 'list' | 'binary'} | 'anchored'
  because
  at tuple index 2:
  {'return', 'something'} is not compatible with {'return', 'iodata' | 'list' | 'binary'}
  because
  'something' is not compatible with 'iodata' | 'list' | 'binary'

165 ERRORS
